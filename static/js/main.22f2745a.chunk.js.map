{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","isImgUrlValid","isImdbUrlValid","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","defaultMovie","NewMovie","onAdd","count","setCount","setMovie","onInputChange","setIsImgUrlValid","setIsImdbUrlValid","isFormValid","length","onSubmit","preventDefault","movieToCheck","pattern","match","customValidation","disabled","App","moviesFromServer","moviesArray","setMoviesArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22f2745a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (name: string, newValue: string) => void,\n  isImgUrlValid?: boolean,\n  isImdbUrlValid?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => { },\n  isImgUrlValid,\n  isImdbUrlValid,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(name, event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {isImgUrlValid && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n\n      {isImdbUrlValid && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n    </div>\n  );\n};\n","import './NewMovie.scss';\nimport React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst defaultMovie = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({\n  onAdd,\n}) => {\n  const [count, setCount] = useState(0);\n\n  const [movie, setMovie] = useState(defaultMovie);\n\n  const onInputChange = (name: string, value: string) => {\n    setMovie({\n      ...movie,\n      [name]: value,\n    });\n  };\n\n  const [isImgUrlValid, setIsImgUrlValid] = useState(false);\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(false);\n\n  const customValidation = (movieToCheck: Movie) => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)(?:[/,\\d_.\\w]+)$/gmi;\n\n    if (!movieToCheck.imgUrl.match(pattern)) {\n      setIsImgUrlValid(true);\n    } else {\n      setIsImgUrlValid(false);\n    }\n\n    if (!movieToCheck.imdbUrl.match(pattern)) {\n      setIsImdbUrlValid(true);\n    } else {\n      setIsImdbUrlValid(false);\n    }\n\n    return movieToCheck.imgUrl.match(pattern)\n      && movieToCheck.imdbUrl.match(pattern);\n  };\n\n  const isFormValid = () => {\n    return movie.title.length && movie.imgUrl.length\n      && movie.imdbUrl.length && movie.imdbId.length;\n  };\n\n  const onFormSubmition = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isFormValid() && customValidation(movie)) {\n      onAdd(movie);\n      setCount(count + 1);\n      setMovie(defaultMovie);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={onFormSubmition}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={onInputChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={onInputChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={onInputChange}\n        isImgUrlValid={isImgUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={onInputChange}\n        isImdbUrlValid={isImdbUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={onInputChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [moviesArray, setMoviesArray] = useState([...moviesFromServer]);\n\n  const onFormSubmit = (movie: Movie) => {\n    setMoviesArray([\n      ...moviesArray,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesArray} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onFormSubmit} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}